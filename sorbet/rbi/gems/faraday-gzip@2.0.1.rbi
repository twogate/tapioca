# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-gzip` gem.
# Please instead update this file by running `bin/tapioca gem faraday-gzip`.


# source://faraday-gzip//lib/faraday/gzip/middleware.rb#5
module Faraday
  class << self
    # source://faraday/2.9.0/lib/faraday.rb#55
    def default_adapter; end

    # source://faraday/2.9.0/lib/faraday.rb#102
    def default_adapter=(adapter); end

    # source://faraday/2.9.0/lib/faraday.rb#59
    def default_adapter_options; end

    # source://faraday/2.9.0/lib/faraday.rb#59
    def default_adapter_options=(_arg0); end

    # source://faraday/2.9.0/lib/faraday.rb#120
    def default_connection; end

    # source://faraday/2.9.0/lib/faraday.rb#62
    def default_connection=(_arg0); end

    # source://faraday/2.9.0/lib/faraday.rb#127
    def default_connection_options; end

    # source://faraday/2.9.0/lib/faraday.rb#134
    def default_connection_options=(options); end

    # source://faraday/2.9.0/lib/faraday.rb#67
    def ignore_env_proxy; end

    # source://faraday/2.9.0/lib/faraday.rb#67
    def ignore_env_proxy=(_arg0); end

    # source://faraday/2.9.0/lib/faraday.rb#46
    def lib_path; end

    # source://faraday/2.9.0/lib/faraday.rb#46
    def lib_path=(_arg0); end

    # source://faraday/2.9.0/lib/faraday.rb#96
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/2.9.0/lib/faraday.rb#107
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/2.9.0/lib/faraday.rb#42
    def root_path; end

    # source://faraday/2.9.0/lib/faraday.rb#42
    def root_path=(_arg0); end

    private

    # source://faraday/2.9.0/lib/faraday.rb#143
    def method_missing(name, *args, &block); end
  end
end

# Middleware main module.
#
# source://faraday-gzip//lib/faraday/gzip/middleware.rb#6
module Faraday::Gzip; end

# Middleware to automatically decompress response bodies. If the
# "Accept-Encoding" header wasn't set in the request, this sets it to
# "gzip,deflate" and appropriately handles the compressed response from the
# server. This resembles what Ruby 1.9+ does internally in Net::HTTP#get.
# Based on https://github.com/lostisland/faraday_middleware/blob/main/lib/faraday_middleware/gzip.rb
#
# source://faraday-gzip//lib/faraday/gzip/middleware.rb#13
class Faraday::Gzip::Middleware < ::Faraday::Middleware
  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#79
  def brotli_inflate(body); end

  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#34
  def call(env); end

  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#65
  def inflate(body); end

  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#83
  def raw_body(body); end

  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#52
  def reset_body(env); end

  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#59
  def uncompress_gzip(body); end

  private

  # @return [Boolean]
  #
  # source://faraday-gzip//lib/faraday/gzip/middleware.rb#89
  def empty_body?(response_env); end

  class << self
    # source://faraday-gzip//lib/faraday/gzip/middleware.rb#14
    def optional_dependency(lib = T.unsafe(nil)); end

    # source://faraday-gzip//lib/faraday/gzip/middleware.rb#23
    def supported_encodings; end
  end
end

# source://faraday-gzip//lib/faraday/gzip/middleware.rb#29
Faraday::Gzip::Middleware::ACCEPT_ENCODING = T.let(T.unsafe(nil), String)

# source://faraday-gzip//lib/faraday/gzip/middleware.rb#21
Faraday::Gzip::Middleware::BROTLI_SUPPORTED = T.let(T.unsafe(nil), FalseClass)

# source://faraday-gzip//lib/faraday/gzip/middleware.rb#30
Faraday::Gzip::Middleware::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# source://faraday-gzip//lib/faraday/gzip/middleware.rb#31
Faraday::Gzip::Middleware::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://faraday-gzip//lib/faraday/gzip/middleware.rb#32
Faraday::Gzip::Middleware::SUPPORTED_ENCODINGS = T.let(T.unsafe(nil), String)

# source://faraday-gzip//lib/faraday/gzip/version.rb#5
Faraday::Gzip::VERSION = T.let(T.unsafe(nil), String)
